#!/usr/bin/env bash

set -u

if [ "$#" -eq 0 ]; then
  cat <<EOF
Usage: whoavail domain1.com domain2.net
       whoavail filename.lst
       whoavail abcdfg.{com,net,org}
       whoavail domain{1,2,3}.com
       whoavail {abcd,efgh,jklm}.{com,net,org}
       whoavail {a..z}domain.{com,net,org} | tee -a domainavail.lst
       whoavail {a..z}{a..z}{a..z}.{com,net,org} | tee -a domainavail.lst

If you give the first parameter as the filename of a text file (filename.lst)
containing a list of domain names (one per line) all the lines in this file
will be processed as a domain name in loop.
EOF
  exit 1
fi

# Plain text / coloring 
# coloured text
# green='\033[0;32m'
# red='\033[0;31m'
# reset='\033[0m'
# plain text (no colors)
green=''
red=''
reset=''

process_domain() {
  local domainname="$1"
  local time
  time=$(date +%y%m%d-%H%M%S)
  local filename="${time}_${domainname}.whois_out"

  whois "$domainname" > "$filename" 2>/dev/null

  if grep -Eq '^No match|^NOT FOUND|^Not fo|AVAILABLE|^No Data Fou|has not been regi|No entri|DOMAIN NOT FOUND' "$filename"; then
    printf "%s\t%sAvailable%s\t%s\n" "$time" "$green" "$reset" "$domainname"
  else
    printf "%s\t%sNOT Available%s\t%s\n" "$time" "$red" "$reset" "$domainname"
  fi

  sleep 3
}

if [ -f "$1" ]; then
  while IFS= read -r line || [ -n "$line" ]; do
    [ -z "$line" ] && continue
    process_domain "$line"
  done < "$1"
else
  for domainname in "$@"; do
    process_domain "$domainname"
  done
fi
